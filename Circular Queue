#include <stdio.h>
#include <stdlib.h>

#define MAX 5

int isFull(int front, int rear) {
    return (front == (rear + 1) % MAX);
}

int isEmpty(int front) {
    return front == -1;
}

void enqueue(int queue[], int *front, int *rear, int value) {
    if (isFull(*front, *rear)) {
        printf("\nQueue is full!\n");
    } else {
        if (*front == -1) {
            *front = 0; // First element
        }
        *rear = (*rear + 1) % MAX; // Circular increment
        queue[*rear] = value; // Insert element
        printf("\nInserted %d\n", value);
    }
}

void dequeue(int queue[], int *front, int *rear) {
    if (isEmpty(*front)) {
        printf("Queue is empty!\n");
    } else {
        printf("Deleted: %d\n", queue[*front]);
        if (*front == *rear) { // Queue is now empty
            *front = -1;
            *rear = -1;
        } else {
            *front = (*front + 1) % MAX; // Circular increment
        }
    }
}

void display(int queue[], int front, int rear) {
    if (isEmpty(front)) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements are:\n");
        int i = front;
        while (1) {
            printf("%d ", queue[i]);
            if (i == rear) break; // Stop after reaching rear
            i = (i + 1) % MAX; // Circular increment
        }
        printf("\n");
    }
}

int main() {
    int queue[MAX];
    int front = -1, rear = -1; // Initialization
    int choice, value;

    while (1) {
        printf("\nCircular queue menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice); // Correct scanf usage

        switch (choice) {
            case 1: // Enqueue
                printf("Enter value to insert: ");
                scanf("%d", &value);
                enqueue(queue, &front, &rear, value);
                break;
            case 2: // Dequeue
                dequeue(queue, &front, &rear);
                break;
            case 3: // Display
                display(queue, front, rear);
                break;
            case 4: // Exit
                printf("Exiting...\n");
                exit(0); // Exit program
            default: // Invalid choice
                printf("Invalid choice!\n");
        }
    }
    return 0;
}

Ouput:
Circular Queue Menu:
1. Enqueue
2. Dequeue
3. Display
4. Exit
Enter your choice: 
1
Enter value to insert:
7

Circular Queue Menu:
1. Enqueue
2. Dequeue
3. Display
4. Exit
Enter your choice: 
1
Enter value to insert:
8

Circular Queue Menu:
1. Enqueue
2. Dequeue
3. Display
4. Exit
Enter your choice: 
2
Deleted: 7

Circular Queue Menu:
1. Enqueue
2. Dequeue
3. Display
4. Exit
Enter your choice: 3
Queue Elements are:
8
Circular Queue Menu:
1. Enqueue
2. Dequeue
3. Display
4. Exit
Enter your choice: 4
Exiting....




